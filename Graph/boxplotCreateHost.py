import csv
import re
import pymysql
import re
import csv
import operator
import pymysql
from pyecharts import options as opts
from pyecharts.charts import Grid, Boxplot, Scatter
from pyecharts.commons.utils import JsCode
from pyecharts.render import make_snapshot
from snapshot_selenium import snapshot


device_info = re.compile(r'8BSX1EQGX|8A2X0KKKF|358123091482602|990012001490561|3C:28:6D:E9:EF:1F|android_id|androidid|AndroidID|2028.*1080|1080.*2080|2160.*1080|1080.*2060|manufacturer|idfa=|"idfa"|imsi=|"imsi"')
location_info = re.compile(r"bid.*cid.*nid.*sid|116\.23.*39\.95|39\.95.*116\.23|%E5%8C%97%E4%BA%AC")
network_info = re.compile(r"NETGEAR67|TP-LINK_3F66|WIN-N1USSIJ01UP.*2755|DESKTOP-LP51G8E.*2199|HONOR-10F78E|192\.168\.[0-9]+\.[0-9]+|52:e0:85:c0:2d:e4|b6:6d:83:11:fa:30")


def get_db_connection(database_name) -> pymysql.Connection:
    host = "*"
    port = 3306
    user = "*"
    password = "*"
    db_connection = pymysql.connect(host=host, port=port, user=user, password=password, database=database_name)
    return db_connection


def get_http_message():
    db_connection = get_db_connection("APKDB")
    select_sql = "select packageName, host, URL, requestHeaders, requestBody from HTTP"
    # print(select_sql)
    db_cursor = db_connection.cursor(pymysql.cursors.DictCursor)
    db_cursor.execute(select_sql)
    http_message_dict = db_cursor.fetchall()
    db_connection.close()
    print("select done")
    return http_message_dict


def get_lib_app():
    lib_app = {}
    with open("appLibAnalyse.csv", "r", newline="", encoding="utf-8-sig") as f:
        csv_reader = csv.reader(f)
        message = list(csv_reader)
        for x in message:
            if x[1] == "set()":
                continue
            lib = x[1].replace("{", "").replace("'", "").replace("}", "").split(", ")
            if len(lib) not in lib_app:
                lib_app[len(lib)] = [x[0]]
            else:
                lib_app[len(lib)].append(x[0])
    return lib_app


def get_count(lib_app):
    count = {}
    for lib_len, app_list in lib_app.items():
        count[lib_len] = {}

    http_message_dict = get_http_message()

    for http_message in http_message_dict:
        for lib_len, app_list in lib_app.items():
            if http_message["packageName"] in app_list:
                if (len(device_info.findall(http_message["requestHeaders"], re.IGNORECASE)) > 0 or len(device_info.findall(http_message["requestBody"], re.IGNORECASE)) > 0 or len(device_info.findall(http_message["URL"], re.IGNORECASE)) > 0) \
                        or (len(location_info.findall(http_message["requestHeaders"], re.IGNORECASE)) > 0 or len(location_info.findall(http_message["requestBody"], re.IGNORECASE)) > 0 or len(location_info.findall(http_message["URL"], re.IGNORECASE)) > 0) \
                        or (len(network_info.findall(http_message["requestHeaders"], re.IGNORECASE)) > 0 or len(network_info.findall(http_message["requestBody"], re.IGNORECASE)) > 0 or len(network_info.findall(http_message["URL"], re.IGNORECASE)) > 0):
                    http_message["host"] = ".".join(http_message["host"].split(".")[-2:])
                    # print(http_message["host"])
                    if http_message["packageName"] not in count[lib_len]:
                        count[lib_len][http_message["packageName"]] = set()
                        count[lib_len][http_message["packageName"]].add(http_message["host"])
                    else:
                        count[lib_len][http_message["packageName"]].add(http_message["host"])
                break

    # for app, lib in count[1].items():
    #     if len(lib) > 10:
    #         print(app)
    #         print(lib)
    #         print(len(lib))

    
    y_data = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
    for lib_len, app_pii_count in count.items():
        for tmp in app_pii_count.values():
            y_data[lib_len-1].append(len(tmp))
    return y_data


if __name__ == '__main__':
    # lib_app = get_lib_app()
    # y_data = get_count(lib_app)
    # print(y_data)

    x_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21]
    # y_data = [
    #     [1, 2, 3, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 3, 1, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 5, 1, 6, 2, 2, 6, 1, 4, 2, 4, 1, 6, 1, 1, 1, 1, 4, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 4, 1, 2, 1, 1, 2, 4, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 3, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 4, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 9, 1, 1, 2, 2, 2, 1, 1, 1, 1, 3, 2, 1, 3, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 2, 3, 1, 1, 1, 1],
    #     [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 3, 1, 1, 1, 1, 2, 1, 3, 3, 2, 1, 1, 5, 2, 17, 6, 1, 1, 2, 1, 1, 3, 3, 1, 3, 1, 3, 1, 1, 6, 2, 2, 4, 2, 2, 2, 2, 1, 2, 2, 2, 2, 5, 1, 1, 1, 3, 4, 1, 1, 1, 1, 3, 1, 1, 5, 1, 1, 1, 2, 4, 2, 1, 2, 2, 2, 1, 2, 3, 2, 2, 1, 1, 3, 2, 1, 1, 1, 4, 1, 1, 3, 2, 1, 1, 2, 2, 2, 4, 1, 4, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 5, 5, 1, 1, 1, 2, 4, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 2, 2, 1, 3, 2, 3, 1, 3, 2, 1, 2, 2, 1, 1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 4, 2, 1, 1, 3, 1, 2, 2, 2, 1, 1, 1, 1, 1, 3, 1, 2, 5, 3, 2, 3, 1, 3, 4, 2, 1, 1],
    #     [3, 1, 3, 1, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 3, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 4, 2, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 4, 1, 5, 3, 2, 1, 2, 10, 2, 4, 1, 1, 3, 1, 1, 1, 1, 4, 2, 1, 1, 1, 4, 1, 2, 2, 1, 1, 2, 1, 6, 3, 2, 3, 1, 1, 4, 2, 3, 1, 1, 3, 4, 7, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 4, 1, 3, 1, 3, 1, 1, 1, 14, 2, 1, 3, 3, 1, 1, 2, 6, 3, 1, 1, 4, 2, 1, 2, 6, 4, 2, 1, 7, 3, 3, 6, 4, 3, 3, 4, 2, 2, 4, 4, 3, 2, 3, 4, 2, 1, 3, 3, 2, 1, 4, 1, 2, 3, 1, 2, 1, 2, 2, 4, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 2, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 5, 1, 2, 4, 1, 3, 2, 2, 1, 3, 2, 1, 1, 2, 1, 2, 1, 3, 1, 3, 2, 3, 2, 2, 1, 1, 1, 2, 2, 1, 3, 3, 1, 2, 3, 3, 4, 1, 2, 2, 2],
    #     [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 3, 5, 2, 1, 2, 1, 3, 2, 2, 1, 1, 2, 3, 11, 5, 2, 9, 1, 2, 3, 1, 2, 2, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 3, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 6, 3, 1, 1, 3, 3, 5, 5, 2, 3, 6, 2, 3, 1, 2, 1, 5, 4, 2, 2, 4, 1, 3, 4, 5, 2, 2, 4, 1, 3, 1, 1, 2, 2, 2, 1, 4, 1, 1, 2, 1, 2, 4, 1, 1, 5, 1, 2, 3, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 3, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 3, 5, 1, 2, 4, 4, 1, 1, 1, 3, 2, 3, 5, 1, 2, 2, 6, 6, 2, 1, 4, 5, 2, 7],
    #     [6, 3, 3, 4, 3, 1, 3, 1, 2, 1, 2, 2, 1, 1, 5, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 2, 2, 4, 2, 1, 1, 5, 2, 1, 1, 8, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 5, 1, 8, 1, 4, 2, 6, 1, 1, 2, 2, 4, 1, 1, 2, 2, 1, 1, 5, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 7, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 5, 6, 10, 2, 1, 1, 1, 2, 4, 2, 2, 1, 2, 1, 1, 3, 1, 3, 2, 2, 3, 2, 1, 1, 1, 3, 3, 7, 1, 2, 2, 3, 3, 1, 2, 1, 3, 1, 1, 1, 2, 2, 1, 2, 3, 3, 2, 3, 2, 4, 2, 1, 1, 2, 1, 1, 3, 1, 1, 2, 4, 2, 4, 2, 1, 2, 1, 2, 1, 6, 1, 5, 8, 8, 2, 1, 3, 6, 7, 1, 6, 4],
    #     [4, 3, 3, 3, 1, 5, 2, 3, 6, 2, 1, 1, 2, 1, 2, 3, 1, 1, 2, 4, 1, 1, 5, 2, 1, 1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 7, 1, 1, 3, 2, 5, 1, 2, 4, 2, 2, 1, 3, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 3, 1, 2, 2, 1, 1, 1, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 4, 2, 1, 3, 1, 3, 3, 4, 1, 1, 2, 2, 1, 20, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 5, 2, 3, 3, 2, 2, 5, 5, 9, 2, 4, 1, 2, 1, 1, 2, 1, 3, 2, 3, 4, 1, 1, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 10, 1, 1, 4, 2, 4, 2, 2, 2, 2, 2, 2, 1, 2, 3, 8, 4, 4, 1, 8],
    #     [7, 1, 3, 3, 3, 6, 1, 6, 3, 1, 1, 1, 2, 1, 5, 2, 2, 1, 1, 3, 1, 1, 7, 4, 1, 1, 1, 1, 5, 1, 1, 3, 5, 3, 1, 2, 2, 6, 1, 10, 2, 1, 2, 5, 9, 4, 2, 1, 3, 2, 1, 1, 3, 3, 1, 1, 3, 3, 2, 4, 4, 3, 2, 1, 3, 2, 1, 6, 3, 1, 12, 1, 1, 1, 2, 1, 11, 1, 6, 3, 1, 2, 1, 2, 1, 2, 1, 1, 1, 4, 4, 3, 4, 1, 2, 7, 1, 1, 6, 4, 1, 1, 2, 1, 1, 4, 16, 1, 1, 1, 1, 1, 1, 2, 2],
    #     [5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 2, 2, 1, 1, 3, 3, 3, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 8, 2, 2, 3, 1, 2, 3, 6, 5, 3, 1, 3, 2, 2, 3, 4, 3, 1, 2, 4, 2, 5, 6, 1, 8, 2, 12, 1, 8, 2, 6, 1, 2, 1, 1, 2, 2, 1, 5, 7, 3, 3, 3, 2, 4, 1, 1, 5, 3, 1, 2, 1, 1, 1, 1, 2, 1, 1, 3, 1, 2, 1, 7, 3, 8, 2, 3, 3, 6],
    #     [3, 1, 3, 2, 2, 1, 2, 9, 3, 2, 1, 2, 4, 2, 1, 1, 6, 1, 3, 3, 4, 15, 2, 4, 5, 5, 2, 1, 3, 1, 6, 2, 3, 4, 2, 7, 2, 2, 2, 1, 4, 1, 1, 1, 4, 2, 1, 2, 3, 1, 1, 6, 3, 1, 4, 1, 1, 3, 3, 6, 1, 3, 2],
    #     [2, 2, 3, 6, 1, 2, 11, 2, 1, 6, 1, 1, 6, 1, 4, 5, 5, 2, 2, 3, 1, 3, 1, 3, 3, 1, 2, 3, 5, 2, 10, 1, 3, 2, 3, 1, 4, 3, 4, 1, 3, 6, 4, 3, 3, 2, 3, 2, 1, 1, 1, 6, 2],
    #     [2, 1, 4, 6, 1, 11, 5, 5, 3, 4, 3, 1, 2, 12, 3, 2, 2, 1, 4, 2, 1, 3, 4, 11, 11, 2, 4, 3, 1, 4, 8, 4, 7, 1, 2, 4, 2, 1, 2, 5],
    #     [8, 5, 2, 4, 2, 21, 2, 5, 4, 1, 4, 1, 1, 5, 8, 2, 2, 4, 4, 11],
    #     [2, 1, 7, 2, 1, 1, 1, 2, 2, 11, 1, 6],
    #     [4, 7, 1, 3, 10, 7, 3, 10, 17, 18, 1, 3, 2, 1, 2],
    #     [1, 2],
    #     [1, 3, 19, 8, 1, 3],
    #     [20],
    #     [7],
    #     [6]
    # ]

    # 二级host
    y_data = [
        [1, 2, 3, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 2, 3, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4, 1, 2, 1, 1, 2, 4, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1],
        [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 3, 2, 2, 4, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 3, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3, 1, 3, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1],
        [2, 1, 3, 1, 1, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 3, 1, 4, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 4, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 3, 1, 3, 2, 1, 1, 2, 4, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 2, 7, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 4, 2, 1, 3, 3, 1, 1, 2, 4, 2, 1, 1, 4, 2, 1, 2, 4, 3, 1, 1, 1, 2, 3, 5, 2, 1, 3, 4, 1, 2, 4, 2, 3, 2, 3, 4, 1, 1, 3, 1, 2, 1, 3, 1, 2, 1, 1, 1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2],
        [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 4, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 5, 2, 1, 1, 1, 1, 3, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 1, 4, 2, 3, 1, 2, 1, 3, 4, 2, 2, 3, 1, 3, 1, 3, 1, 2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1, 3, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 1, 2, 2, 1, 1, 1, 1, 3, 2, 3, 3, 1, 2, 2, 4, 4, 2, 1, 1, 3, 1, 3],
        [1, 3, 2, 4, 2, 1, 3, 1, 2, 1, 1, 2, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 4, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 3, 1, 1, 2, 2, 3, 2, 1, 1, 1, 2, 1, 5, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 3, 2, 4, 2, 1, 1, 2, 1, 1, 3, 1, 1, 2, 4, 1, 2, 2, 1, 2, 1, 2, 1, 4, 1, 4, 4, 4, 2, 1, 1, 4, 3, 1, 3, 2],
        [4, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 3, 1, 1, 4, 2, 1, 1, 1, 2, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 5, 1, 1, 2, 2, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 2, 1, 5, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 4, 2, 3, 1, 2, 2, 2, 4, 4, 2, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 3, 1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 4, 4, 2, 1, 4],
        [4, 1, 3, 2, 3, 6, 1, 3, 2, 1, 1, 1, 2, 1, 5, 2, 2, 1, 1, 2, 1, 1, 5, 4, 1, 1, 1, 1, 4, 1, 1, 1, 2, 3, 1, 2, 2, 4, 1, 5, 2, 1, 2, 1, 5, 4, 2, 1, 2, 1, 1, 1, 2, 3, 1, 1, 3, 3, 2, 1, 3, 2, 2, 1, 2, 2, 1, 2, 3, 1, 2, 1, 1, 1, 2, 1, 6, 1, 2, 3, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 3, 3, 4, 1, 2, 3, 1, 1, 3, 4, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2],
        [3, 2, 2, 2, 1, 2, 2, 2, 1, 2, 4, 1, 2, 2, 1, 1, 2, 2, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 3, 1, 2, 3, 3, 3, 2, 1, 2, 2, 2, 3, 1, 3, 1, 1, 3, 2, 4, 3, 1, 5, 1, 12, 1, 3, 2, 5, 1, 1, 1, 1, 2, 1, 1, 3, 3, 2, 3, 3, 2, 3, 1, 1, 4, 3, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 6, 3, 3, 2, 3, 3, 2],
        [2, 1, 2, 2, 2, 1, 2, 8, 3, 2, 1, 2, 3, 2, 1, 1, 5, 1, 3, 3, 3, 9, 2, 4, 4, 5, 2, 1, 3, 1, 5, 2, 2, 4, 2, 5, 1, 2, 2, 1, 3, 1, 1, 1, 4, 2, 1, 2, 3, 1, 1, 3, 3, 1, 3, 1, 1, 3, 2, 3, 1, 3, 2],
        [2, 2, 2, 3, 1, 2, 10, 2, 1, 4, 1, 1, 4, 1, 4, 2, 5, 2, 2, 3, 1, 2, 1, 3, 2, 1, 2, 3, 4, 2, 10, 1, 2, 2, 3, 1, 2, 3, 4, 1, 3, 6, 3, 3, 3, 2, 3, 1, 1, 1, 1, 2, 2],
        [2, 1, 2, 2, 1, 10, 4, 4, 3, 2, 2, 1, 2, 2, 3, 1, 2, 1, 3, 2, 1, 3, 4, 4, 4, 2, 4, 2, 1, 4, 6, 3, 5, 1, 2, 2, 2, 1, 2, 4],
        [6, 4, 2, 3, 2, 17, 1, 5, 3, 1, 3, 1, 1, 3, 7, 2, 2, 3, 3, 5],
        [2, 1, 6, 2, 1, 1, 1, 2, 1, 7, 1, 5],
        [4, 5, 1, 3, 7, 3, 2, 5, 6, 5, 1, 3, 2, 1, 2],
        [1, 2],
        [1, 3, 18, 3, 1, 3],
        [15],
        [],
        [3],
        [],
        [6]
    ]


    box_plot = Boxplot()

    box_plot = (
        box_plot.add_xaxis(x_data)
        .add_yaxis("", box_plot.prepare_data(y_data))
        .set_global_opts(
            xaxis_opts=opts.AxisOpts(name="Library count"),
            yaxis_opts=opts.AxisOpts(name="Host count"),
        )
    )
    x_data = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "19", "21"]
    scatter_min = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, None, 20, 7, 6]
    scatter_max = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, 2, None, None, None, None]
    
    scatter_min = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, None, 15, 3, 6]
    scatter_max = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, 2, None, None, None, None]

    scatter = (
        Scatter()
        .add_xaxis(x_data)
        .add_yaxis("", scatter_min)
        .add_yaxis("", scatter_max)
        .set_global_opts(
            xaxis_opts=opts.AxisOpts(
                type_="category",
                axislabel_opts=opts.LabelOpts(is_show=True),
                axistick_opts=opts.AxisTickOpts(is_show=True),               
            ),
            yaxis_opts=opts.AxisOpts(
                type_="value",
                # max_=25,
                max_=18,
                axislabel_opts=opts.LabelOpts(is_show=True),
                axistick_opts=opts.AxisTickOpts(is_show=True),               
            ),

        )
        # .render()
    )

    grid = (
        Grid()
        .add(
            box_plot,
            grid_opts=opts.GridOpts(),
        )
        .add(
            scatter,
            grid_opts=opts.GridOpts(),
        )
        # .render()
    )
    make_snapshot(snapshot, grid.render(), "333.png")

